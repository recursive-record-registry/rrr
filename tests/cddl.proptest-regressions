# Seeds for failure cases proptest has generated in the past. It is
# automatically read and these particular cases re-run before any
# novel cases are generated.
#
# It is recommended to check this file in to source control so that
# everyone who runs the test benefits from these saved cases.
cc 287d5f6872c85c1b91dc23caa30db05d7660d4dbaa533ab0b839f1ad6911f476 # shrinks to input = _VerifyCddlRegistryArgs { config_with_signing_keys: RegistryConfigWithSigningKeys { signing_keys: [], config: RegistryConfig { kdf_algorithm: KdfAlgorithm { name: "", parameters: HashParams { m_cost: 56, t_cost: 7, p_cost: 7, pepper: [254, 212, 99, 104, 180, 17, 67, 186, 215, 13, 46, 15, 175, 15, 128, 128, 106, 66, 244, 15, 59, 63, 14, 147, 92, 149, 4, 254, 160, 125, 44, 29, 127, 88, 15, 118, 222, 241, 246, 77, 148, 50, 79, 158, 45, 99, 232, 75, 88, 153, 155, 20, 53, 186, 119, 206, 180, 7, 36, 13, 129, 43, 45, 172, 182, 161, 11, 246, 78, 60, 196, 144, 47, 160, 195, 247, 87, 96, 112, 184, 141, 97, 219, 98, 33, 112, 147, 131, 250, 142, 168, 103, 71, 141, 49, 161, 213, 234, 241, 136, 15, 123, 60, 106, 246, 147, 138, 48, 61, 244, 176, 77, 220, 216, 124, 196, 147, 97, 167, 201, 64, 235, 85, 40, 111, 211, 77, 90, 92, 114, 59, 147, 99, 124, 203, 193, 174, 200, 40, 92, 228, 222, 70, 253, 13, 36, 32, 7, 98, 152, 216, 246, 102, 64, 209, 123, 5, 61, 216, 183, 215, 92, 74, 227, 168, 66, 3, 40, 248, 138, 179, 155, 239, 253, 77, 48, 68, 211, 123, 183, 184, 208, 154, 173, 248, 249, 145, 166, 44, 119, 209, 19, 239, 50, 173, 169, 175, 198, 47, 160, 83, 239, 99, 11, 252, 88, 3, 63, 26, 95, 103, 2, 20, 37, 188, 182, 116, 229, 19, 225, 181, 47, 233, 6, 10, 128, 239, 150, 74, 168, 240, 44, 160, 177, 194, 82, 147, 71, 13, 212, 135, 53, 75, 88, 202, 76, 212, 66, 21, 3, 97, 227, 40, 135, 117, 192, 184, 142, 251, 134, 136, 218, 9, 12, 212, 95, 87, 75, 60, 78, 201, 108, 186, 193, 92, 122, 23, 100, 176, 194, 15, 181, 137, 130, 8, 93, 82, 226, 51, 57, 28, 196, 103, 78, 142, 46, 18, 131, 44, 25, 78, 103, 134, 107, 165, 168, 168, 73, 196, 32, 108, 66, 155, 97, 57, 212, 7, 95, 199, 64, 24, 182, 31, 105, 39, 173, 22, 216, 179] } }, verifying_keys: [] } } }
cc 53dba0a3be87a542e319b810a75838c1f7a6f25864297e19e9e7948f993a984c # shrinks to input = _VerifyCddlRegistryArgs { config_with_signing_keys: RegistryConfigWithSigningKeys { signing_keys: [], config: RegistryConfig { hash: RegistryConfigHash { algorithm: Argon2(Argon2Params { variant: Argon2d, m_cost: 288, t_cost: 8, p_cost: 36, pepper: Secret }), kdf_input_length_in_bytes: ConfigParam<KdfInputLengthInBytes>(25), successor_nonce_length_in_bytes: ConfigParam<SuccessorNonceLengthInBytes>(17) }, kdf: RegistryConfigKdf { algorithm: Hkdf(HkdfParams { prf: Sha512 }), file_name_length_in_bytes: ConfigParam<FileNameLengthInBytes>(21) }, verifying_keys: [] } } }
cc 839af26b7476f2e2b13ff45663cd929bd3a8d2b30cb2459c93a263608525d15c # shrinks to input = _VerifyCddlRegistryArgs { config_with_signing_keys: RegistryConfigWithSigningKeys { signing_keys: [], config: RegistryConfig { hash: RegistryConfigHash { algorithm: Argon2(Argon2Params { variant: Argon2d, m_cost: 8, t_cost: 15, p_cost: 1, pepper: Secret }), kdf_input_length_in_bytes: ConfigParam<KdfInputLengthInBytes>(121), successor_nonce_length_in_bytes: ConfigParam<SuccessorNonceLengthInBytes>(119) }, kdf: RegistryConfigKdf { algorithm: Hkdf(HkdfParams { prf: Sha512 }), file_name_length_in_bytes: ConfigParam<FileNameLengthInBytes>(30) }, verifying_keys: [] } } }
cc be44eefb8ba98ff0c66520db33a40b0ee6143bef1fabf640443b673523646ff6 # shrinks to input = _VerifyCddlRecordArgs { record: Record { metadata: RecordMetadata(Map({HashableCborValue(Integer(Integer(1))): Tag(0, Text("-262144-12-31T00:00:01-24:00"))})), data: b"" } }
cc 389b5f2d6f4f756558ada265984367ed9bfc0ead2d2faa13bb46087ea7694843 # shrinks to input = _VerifyCddlFragmentArgs { config_with_signing_keys: RegistryConfigWithSigningKeys { signing_keys: [], config: RegistryConfig { hash: RegistryConfigHash { algorithm: Argon2(Argon2Params { variant: Argon2d, m_cost: 288, t_cost: 3, p_cost: 36, pepper: Some(Secret) }), output_length_in_bytes: ConfigParam<OutputLengthInBytes>(110) }, kdf: RegistryConfigKdf { algorithm: Hkdf(HkdfParams { prf: Sha512 }), file_name_length_in_bytes: ConfigParam<FileNameLengthInBytes>(2), succession_nonce_length_in_bytes: ConfigParam<SuccessionNonceLengthInBytes>(113), root_predecessor_nonce: SuccessionNonce(Secret) }, verifying_keys: [] } }, segment: Segment { metadata: SegmentMetadata(Map({HashableCborValue(Integer(Integer(1))): Bool(true)})), data: b"0\x03\x96%C\x0e\xb7\xc5l\x93H\xbbM\xed\xec]\x1fnP\xa9|\x91\xc3\xee\xd8\xedO(\x86\xdb\x1f="â€¦ }, encryption_algorithm: None }

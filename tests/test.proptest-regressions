# Seeds for failure cases proptest has generated in the past. It is
# automatically read and these particular cases re-run before any
# novel cases are generated.
#
# It is recommended to check this file in to source control so that
# everyone who runs the test benefits from these saved cases.
cc d98fba4b2651555a12de3ec0808ad6225a505fcd47a1799b320559b9a38fc240 # shrinks to input = _RegistryArgs { config_with_signing_keys: RegistryConfigWithSigningKeys { signing_keys: [], config: RegistryConfig { hash: RegistryConfigHash { algorithm: Argon2(Argon2Params { variant: Argon2d, m_cost: 176, t_cost: 13, p_cost: 22, pepper: [31, 32, 227, 111, 137, 106, 142, 240, 185, 88, 20, 122, 215, 135, 209, 132, 32, 193, 7, 126, 88, 90, 132, 45, 210, 213, 84, 14, 187, 17, 137, 105, 164, 223, 144, 5, 8, 196, 69, 206, 87, 23, 203, 131, 202, 40, 232, 99, 81, 35, 96, 124, 171, 64, 97, 93, 176, 135, 107, 106, 231, 88, 89, 128, 11, 78, 198, 220, 0, 71, 209, 168, 176, 219, 151, 204, 160, 63, 101, 39, 102, 32, 245, 213, 170, 36, 232, 147, 58, 46, 225, 249, 102, 213, 132, 44, 79, 200, 14, 0, 69, 202, 44, 40, 252, 142, 3, 75, 229, 26, 65, 187, 52, 225, 129, 16, 179, 106, 24, 108, 145, 228, 46, 27, 166, 134, 152, 170, 30, 230, 208, 214, 208, 117, 119, 22, 232, 157, 169, 97, 168, 219, 226, 69, 253, 221, 80, 196, 207, 235, 231, 108, 186, 198, 91, 55, 45, 113, 205, 64, 77, 241, 197, 29, 65, 145, 161, 198, 231, 126, 194, 235, 59, 250, 123, 145, 129, 183, 102, 25, 154, 191, 213, 240, 67, 90, 225, 13, 239, 66, 197, 227, 95, 26, 77, 79, 2, 182, 166, 66, 164, 116, 204, 56, 105, 208, 125, 166, 235, 208, 242, 51, 223, 52, 220, 1, 146, 133, 211, 110, 193, 215, 194, 244, 205, 53, 65, 74, 23, 112, 245, 139, 28, 96, 139, 213, 81, 10, 158, 23, 125, 63, 96, 19, 238, 159, 178, 0, 172, 87, 18, 205, 187, 174, 67, 74, 131, 151, 223, 227, 129, 90, 27, 120, 206, 148, 225, 131, 25, 239, 225, 18, 21, 116, 39, 103, 128, 182, 182, 40, 30, 53, 127, 248, 254, 113, 82, 76, 55, 111, 197, 234, 232, 214, 181, 119, 68, 210, 150, 74, 53, 182, 166, 3, 231, 158, 158, 132, 79, 215, 119, 137, 111, 224, 21, 199, 216, 250, 60, 238, 232, 235, 120, 70, 52, 19, 213, 109, 49, 59, 137, 217, 91, 17, 193, 41, 69, 165, 150, 223, 220, 55, 222, 227, 40, 133, 248, 3, 172, 191, 191, 96, 149, 59, 201, 32, 212, 62, 111, 220, 183, 228, 87, 225, 211, 4, 61, 56, 31, 196, 160, 58, 30, 237, 146, 119, 205, 160, 7, 210, 154, 212, 12, 114, 101, 153, 155, 155, 23, 35, 26, 158, 4, 191, 214, 99, 129, 137, 96, 60, 149, 63, 115, 62, 195, 45, 127, 91, 81, 166, 253, 237, 170, 133, 195, 95, 142, 88, 88, 45, 235, 130, 133, 89, 86, 158, 243, 162, 33, 147, 100, 87, 2, 188, 133, 70, 239, 242, 126, 34, 7, 32, 160, 100, 107, 158, 209, 95, 155, 250, 107, 197, 161, 199, 72, 95, 227, 27, 126, 213, 85, 67, 58, 63, 40, 107, 173, 202, 90, 202, 128, 242, 164, 219, 63, 113, 126, 107, 210, 248, 238, 102, 109, 217, 181, 3, 50, 97, 72, 63, 216, 45, 45, 138, 223, 74, 113, 23, 224, 215, 240, 95, 233, 10, 74, 110, 142, 158, 35] }), kdf_input_length_in_bytes: 57, successor_nonce_length_in_bytes: 59 }, kdf: RegistryConfigKdf { algorithm: Hkdf(HkdfParams { prf: Sha256 }), file_name_length_in_bytes: 45 }, verifying_keys: [] } }, record_names: [[209, 2, 41, 202, 85, 27, 112, 63, 9, 31, 157, 177, 72, 234, 250, 128, 71, 141, 25, 95, 29, 216, 46, 231, 40, 203, 190, 153, 91, 234, 213, 102, 142, 212, 30, 149, 4, 184, 22, 138, 255, 244, 94, 107, 61, 194, 33, 151, 181, 62, 127, 70, 150, 185, 89, 160, 153, 159, 81, 61, 218, 84, 234, 248, 87, 216, 117, 48, 60, 93, 224, 109, 198, 63, 103, 64, 66, 73, 145, 132, 42, 247, 61, 51, 183, 201, 249, 147, 115, 100, 3, 233, 255, 243, 44, 0, 110, 44, 138, 63, 91, 207, 4, 221, 146, 173, 246, 39, 133, 31, 146, 230, 131, 139, 246, 235, 19, 65, 182, 239, 195, 228, 106, 103, 188, 39, 157, 209, 249], [188, 126, 160, 90, 38, 53, 203, 255, 204, 20, 36, 165, 139, 88, 168, 207, 127, 5, 197, 218, 162, 13, 184, 154, 213, 163, 140, 77, 127, 18, 44, 69, 206, 208, 52, 91, 72, 48, 219, 206, 211, 239, 11, 1, 195, 82, 76, 50, 9, 168, 62, 245, 128, 64, 15, 107, 2, 162, 64, 159, 233, 125, 34, 213, 145, 46, 87, 152, 148, 105, 41, 24, 27, 148, 212, 11, 95, 147, 152, 252, 81, 27, 175, 34, 5, 91, 15, 220, 113, 46, 47, 151, 122, 88, 141, 191, 159, 226, 193, 212, 26, 15, 202, 28, 2, 157, 193, 99, 177, 245, 141, 81, 164, 78, 17, 169, 181, 51, 24, 109, 238, 223, 111, 109, 143, 198, 116, 47, 193, 157, 65, 145, 0, 71, 217, 222, 104, 113, 88, 23, 222, 66, 0, 98, 6, 142, 249, 67, 50, 48, 95, 72, 151, 128, 187, 137, 204, 244, 145, 154, 40, 111, 119, 118, 3, 236, 47, 168, 209, 151, 180, 230, 179, 172, 9, 45, 160, 144, 77, 64, 130, 6, 84, 99, 234, 156, 201, 172, 88, 137, 178, 188, 210, 1, 182, 14, 122, 54, 101, 118, 65, 59, 242, 16, 247, 223, 94, 140, 219, 148, 83, 139, 188, 68, 216, 107, 196, 127, 100, 181, 20, 125, 53, 199, 35, 136, 11], [184, 160, 166, 86, 156, 52, 127, 251, 222, 48, 173, 6, 80, 176, 155, 196, 220, 23, 190, 110, 20, 217, 52, 23, 251, 133, 98, 255, 131, 134, 77, 112, 66, 132, 87, 27, 158, 51, 75, 216, 130, 146, 237, 52, 157, 96, 46, 120], [220, 189, 104, 235, 172, 208, 66, 59, 149, 211, 181, 53, 224, 169, 4, 185, 213, 12, 150, 43, 67, 217, 101, 193, 1, 148, 190, 35, 157, 118, 197, 178, 139, 149, 225, 31, 175, 167, 114, 201, 220, 154, 155, 186, 13, 90, 2, 42, 71, 25, 30, 23, 189, 78, 47, 151, 182, 112, 135, 49, 192, 156, 40, 211, 177, 70, 170, 3, 80, 72, 40, 187, 141, 58, 62, 171, 114, 229, 136, 211, 124, 70, 232, 113, 252, 188, 206, 93, 71, 198, 204, 89, 33, 56, 23, 143, 248, 140, 210, 184, 144, 195, 30, 206, 20, 147, 52, 84, 88, 105, 53, 237, 132, 128, 47, 31, 11, 33, 176, 202, 79, 79, 82, 216, 222, 162, 174, 251, 24, 249, 23, 44, 145, 14, 59, 83, 210, 170, 206, 148, 219, 240, 88, 62, 234, 120, 95, 146, 200, 252, 94, 133, 6, 159, 15, 164, 239, 67, 20, 38, 175, 182, 198, 145, 177, 69, 32, 238, 199, 63, 98, 64, 213, 170, 46]] }
cc 99ac138e132ce6c5c6bf0e1190d4ce41a660217e2336fc0d0ded66e3d97fd2b0 # shrinks to input = _PropRegistryArgs { config_with_signing_keys: RegistryConfigWithSigningKeys { signing_keys: [], config: RegistryConfig { hash: RegistryConfigHash { algorithm: Argon2(Argon2Params { variant: Argon2d, m_cost: 416, t_cost: 36, p_cost: 52, pepper: Secret }), output_length_in_bytes: ConfigParam<OutputLengthInBytes>(49) }, kdf: RegistryConfigKdf { algorithm: Hkdf(HkdfParams { prf: Sha256 }), succession_nonce_length_in_bytes: ConfigParam<SuccessionNonceLengthInBytes>(71), file_name_length_in_bytes: ConfigParam<FileNameLengthInBytes>(1) }, verifying_keys: [] } }, record_test_tree: RecordTestNode { record_name: b"\x0c\xd1\xab\x82\xbd&\x852\xab\x8a7\xb69\xf4\xcd\xc5\x04\xa1\'\x97\xbe\x92\x135c)0\xd1x\xf2\x80%<\xfb\"$*\xde\x93", occurrences: 2, successors: [RecordTestNode { record_name: b"\xd8\x08\x9b\xfa\xed\xe0W\xb4\x91\x00\x11\xda\xc0\x19\x84\rb\x97G\xdf\x12\xb9:\xa9\xc8\t\xb9F\xc3\xf0\xbb\xa6\x84\xa9\xce\x06F\xa1b\x99kj\x86\xf3\x10\n\xa88\x17=\xb6r3\xa7@\xf4\x95\xac\xa0$J\xaf,t\xf4MC\xab\xdf\x12\x08\x06\'\x0f\"\xebu\xbaC\xbd<\xcb\x023\xe0p\xf2\xce\xef\xfa\xfejBM\x06;\x84\xbbz\xa0\xd0\xe5\x0c\xd2J^\"f\xcb\xf9\xdc\xabei\xc1\xa3\x1bw\xcc\xcd\x9bM\x9evq=\xf5\x97\x85\xdf\x91\xbb3\x01\xc3\xfev?MB\x17\xa2a\xf0\x96v", occurrences: 3, successors: [RecordTestNode { record_name: b"\xa8\x9b\x13\xabbn\x8d\xc7F\xe1e)\xf3\xfa\x01\x9d\x10\xd9\xda\xf2\xb8}@\xd3\xac\xd2\xea\xa9\xd4a\x86\xd2E=<S\xfe", occurrences: 3, successors: [] }] }] }, encryption_algorithm: Some(Aes256Gcm) }
cc eaa1cef44f2a6264d895c75d1eda8f146108efb30a4779176a73018b73eb8bcd # shrinks to input = _PropRegistryArgs { config_with_signing_keys: RegistryConfigWithSigningKeys { signing_keys: [], config: RegistryConfig { hash: RegistryConfigHash { algorithm: Argon2(Argon2Params { variant: Argon2i, m_cost: 192, t_cost: 6, p_cost: 24, pepper: Some(Secret) }), output_length_in_bytes: ConfigParam<OutputLengthInBytes>(21) }, kdf: RegistryConfigKdf { algorithm: Hkdf(HkdfParams { prf: Sha512 }), file_name_length_in_bytes: ConfigParam<FileNameLengthInBytes>(1), succession_nonce_length_in_bytes: ConfigParam<SuccessionNonceLengthInBytes>(44), root_predecessor_nonce: SuccessionNonce(Secret) }, verifying_keys: [] } }, record_test_tree: RecordTestNode { record_name: b"\x82d\xe9M\x11\x97p\xc6\x8fo\xa4\x1bh\x87H\xa8\x8bWI\xe3E\xbci\xc0\x9e2j\xff[\xbe,D\xed\x81\x8e\xd4D\xb8\xe1PWF\xaa\xcd\x1b}$\x18+]&\x86\xa6?,\xc9\x00\xb9\x99[\x95V\'\xf7\xbe\xc2\xca\xcd\xdb\x1d\xe3\xc3k\x87\x8b\x0c\x96\x03\xfd\x9b\x91Cv\xe1\xc4\x89\xd7M\xd6\xd1T\xe4\x15b\xb1\'\xe13\x91N\xe0\xee\x01\x02\']#e\xc9&\xca\x1fVE\xe7\x8a\xf1$\xcb\x9f\xd7\x00\xc6\xd03\xec\xe4#\xc0\xb2\x83-\xaeE\xe7@\n3Z", version_contents: [[2, 126, 187, 150, 67, 179, 28, 246, 75, 98, 35, 123, 17, 37, 154, 72, 41, 42, 51, 172, 213, 41, 207, 208, 88, 155, 74, 20, 255, 218, 247, 144, 49, 34, 32, 31, 188, 127, 96, 210, 65, 223, 245, 191, 32, 159, 159, 231, 29, 132, 235, 253, 33, 68, 245, 206, 95, 207, 226, 216, 236, 5, 74, 32, 2, 51, 146, 151, 73, 48, 77, 230, 6, 139, 200, 133, 173, 66, 36, 118, 216, 85, 4, 58, 98, 83, 4, 246, 13, 134, 146, 48, 198, 110, 133, 24, 106, 148, 239, 151, 49, 225, 104, 117, 98, 220, 230, 50, 180, 201, 219, 154, 36], [219, 216, 22, 207, 144, 181, 159, 56, 86, 193, 201, 53, 77, 101, 33, 203, 181, 104, 143, 188, 187, 31, 230, 179, 102, 126, 35, 145, 222, 117, 154, 29, 45, 92, 236, 71, 119, 48, 232, 200, 147, 58, 84, 241, 143, 1, 37, 217, 67, 21, 207, 33, 243, 150, 146, 49, 17, 5, 9, 49, 75, 10, 13, 38, 70, 160, 141, 239, 31, 211, 255, 131, 116, 114, 38, 1, 102, 189, 66, 161, 159, 139, 185, 252, 70, 30, 232, 221, 145, 97, 72, 136, 87, 91, 125, 216, 192, 250, 173, 217, 31, 117, 15, 214, 236, 46, 70, 228, 202, 231, 20, 187, 55, 215, 149, 31, 122, 209], [235, 155, 142, 73, 188, 152, 161, 127, 20, 86, 220, 9, 45, 194, 66, 181, 170, 236, 72, 208, 72, 71, 180, 214, 177, 10, 119, 232, 212, 40, 40, 240, 53, 197, 177, 232]], successors: [] }, encryption_algorithm: None }
cc 63b3c200d4b275f70fbbe83ce8e5f7597ec5ded39554b84e93b70f8f1efac812 # shrinks to input = _PropRegistryArgs { config_with_signing_keys: RegistryConfigWithSigningKeys { signing_keys: [], config: RegistryConfig { hash: RegistryConfigHash { algorithm: Argon2(Argon2Params { variant: Argon2d, m_cost: 72, t_cost: 11, p_cost: 9, pepper: Some(Secret) }), output_length_in_bytes: ConfigParam<OutputLengthInBytes>(71) }, kdf: RegistryConfigKdf { algorithm: Hkdf(HkdfParams { prf: Sha256 }), file_name_length_in_bytes: ConfigParam<FileNameLengthInBytes>(1), succession_nonce_length_in_bytes: ConfigParam<SuccessionNonceLengthInBytes>(110), root_predecessor_nonce: SuccessionNonce(Secret) }, verifying_keys: [] } }, record_test_tree: RecordTestNode { record_name: b"\xa1\xe2\x95\xf7(\x82X\xd1L\xd7AY\x97\xb64s\x9c\xef\xb4T\xa6wtT\xda\xe6\x10\x14\xa5z&\x11\xf0\xcb\xbc\xba\x17>_\xebf\xda\xde3\xa0\xe2\xf6\xca\x00\xa8~\xfd\xe5\xd4\x9d\xcel\x1c|y\x86\xcf\x85R\x993%\x10~\t\xa4\xdc\x0f\x12\xca\xb4ZZ\x0c-\xae\xcb\x8f=\n\xcc+\xa9\x07\xfby)\xaf\xdaY\xea\xd7\xdc\x82\xd5\xf1\xd7\xc1\x80\x89I\x12E`\xc0t\xfb\xdc\x13\xfad\xfb\xe0#\xb3 \xae\x96\x81\x12x\x9d\x1b\x8a\xefv\xad\"\xc7\xe3\x8dig\xea\xd8\xf5\x95\xfa\x81\xab\r\x83\xab\xe7[\xeb/5\xf6x\xa8W\x9d7]\xcc\xc8\xcd?`\n{Y\xc8(\xe5B\xce\xc6\xbd\xff:\"\x9f", record_versions: [Record { metadata: RecordMetadata(Map({})), data: b"\x9d\xf9\xd3kN\x97\xc2m\xffSQ\x8f\x02<\xdakI\x0c\x065(\n\x0c\xd2#\xbb\x81\xce>8\x81\x8c"… }], successors: [RecordTestNode { record_name: b"\xd2\xb1f\x17\x92k\x05\x87b:\xb7Z\x17\xf0\x017$\x12~\x07g\x80;\x08@IJ\xd7c3\xc1{2@G\xbc9\xb8\xa5!\xdd\xd0\x0f\xb8B7\x87)\xe2N\xba\x95\x12\x18\xa66(\xf7DtZ\x89\x89\xa6\x08\xe3\xbf\xf1\xfc\xe5\x1b\x03\xe3\xf6\xff\xbd\x04\x0fZ\xb8MO*\x8f\x9dS\xdf\xc04?\xfc\xc1\xd4", record_versions: [Record { metadata: RecordMetadata(Map({})), data: b"N\xec67 \xc1k\xc3\xd2\x05W\x10\xef\xf7\xf5\'\xf6\x9dg\x94\x94R\x91<f-\\\x8c\x92\xcdTO"… }, Record { metadata: RecordMetadata(Map({})), data: b"\xd9\x87\xac\xb82\x1b\xdf\xbc^k,\x85\xf8=\xbe \xc1\x88^U\xb7\xd9Lw\x85\xc0\tX\xab\x18_\x80"… }], successors: [RecordTestNode { record_name: b"V\xa4N\x01P\xaa\x90\x10\xca\xad\xd1hwh\xa8\x8d\xb8\xee\x80[\"S\xf0\xf9\x18\x05\x01\xad\xa2\xf3\x861\xf5C=*\xc1\xa2xP9v\xc4\x11\x87\"\xbb4\x11 \x00\x1e\xcc\xa7\xad\t\x84\xb9\xac37\xcbU\xa7L\xe3e\x1e\x83:G\xed\xfd%|m\x11\x02BI\x9d\x1c\xa16\xcc\xbb\x82k\x8eL\xc9\xf1n%\xed\xb6\xfc\xb1\x8c\xb9\xb3\xbb\x83R\x9c\x0b\'\xed\x0e7\xe5|\x84@\x84\x8c<Y\xf2\xd1$\x190\x15\xd1\xd3\xf3p$n\xac\x9d\x17\x0b\xeb\x1f\xf8\x8d", record_versions: [Record { metadata: RecordMetadata(Map({})), data: b"VZ\xc4U\xc7\xdc\x05" }, Record { metadata: RecordMetadata(Map({})), data: b"{6syy\xc2k!\xa3{z$\xb1\xfd\xd3/\\,0\xdc\xb0" }], successors: [] }] }, RecordTestNode { record_name: b"u\xc8m!t0\x11\xe0\x85\xd0;S[\x1fC\xefJ\xd7\xb5J\xee\xee\xd2\xf0\x80U-]\xfb)#D\xe9\xdd\xdc\xbc\"O\xd3\'\xec\x85\xd0\n\x99h\x16d3Z\xc4\x9e\xc6+/b,\xcf\x1e\xe1\x82\x0b7T\xe8mS\xad\x1a\x9ag~\x8dV*\x9b\xa9^s\xff\xa4\x83\xd5w\x9f\x9a\x9c\x16\x83\x06w\xf4\xa3\xce\xb4\xf8l\xc9\x9e\x8e\xe6N\xc3\xb9Fc\xc5\xb5\x8f^\xf1z\xee.\xa8\xb9\xaf,\x05\'\xff\xd3>W\xb8\xfb\x8a\xaa\xe3K\xf99\xbf\x0b\x9e\x94:w\x87e\xf7\x1b", record_versions: [Record { metadata: RecordMetadata(Map({})), data: b"Hv\xff\x95\xeb\xe4\x08\x1a\xcd\xde\xc3\x8d\xfc0jc\xae4BiK\xe9_\x8e\xeb\x81" }, Record { metadata: RecordMetadata(Map({})), data: b"\x98c\xaf\xb7M\x07\xa8\x9a\x92O\xe2\x9a\x91:31\xbc\x0bD\x9f\xc9\x82" }, Record { metadata: RecordMetadata(Map({})), data: b"\xf3\xd0\x9e\x04\xea\xf4!j\xc9\x97\x9aq\xc7&\x933\x89\xe4\xbe\x9b\xf6\xac\xaf\x04$]W&s\x1e\x84T"… }], successors: [] }] }, encryption_algorithm: None }
cc 9b36a2125fc7388712d0dc4b37d2fe70f3e029bf14dc5bcd1d6ef43636026f04 # shrinks to input = _PropRegistryArgs { config_with_signing_keys: RegistryConfigWithSigningKeys { signing_keys: [], config: RegistryConfig { hash: RegistryConfigHash { algorithm: Argon2(Argon2Params { variant: Argon2d, m_cost: 456, t_cost: 20, p_cost: 57, pepper: Some(Secret) }), output_length_in_bytes: ConfigParam<OutputLengthInBytes>(38) }, kdf: RegistryConfigKdf { algorithm: Hkdf(HkdfParams { prf: Sha512 }), file_name_length_in_bytes: ConfigParam<FileNameLengthInBytes>(1), file_tag_length_in_bytes: ConfigParam<FileTagLengthInBytes>(41), succession_nonce_length_in_bytes: ConfigParam<SuccessionNonceLengthInBytes>(56), root_predecessor_nonce: SuccessionNonce(Secret) }, verifying_keys: [] } }, record_test_tree: RecordTestNode { record_name: b"].rV\x055\x88Z\x9e\xb1\xc4\r\xa8+\xd6\xe4\xd2O+L`\xc8D^\xc9Py<T\xf9\x85q\x03dt\x93\xa0\x7f\xeb\xa03L\xed*g\xa8/\x80\xcd\x08\x1d\x8d\xe1\x98\x82\xf6{\xa7\xb0u\xf3q}\xaa\xcd\xfa\xe7\x03u\xaa\x19?\xcdy\xc6\x0b\xdcN\x00\x86\xe0\x9ex\xc49\xa8z\x97\xba-\x1eG:8\xbae\x8e\x06\x81\xf7\xfdr\xe5d4\xf1*\xeb\xdeX\xb0w\x02_\xe22\xa1\x915\x95v?\x13a\xfb>]\xda:\xb5L\x02?\x93\xa9#o8\xb9\xea\xb0\xeb\x99\xf0\x8f\xe8\xdcto\xda\xfb\xed\xe9\x14\xce\xc23\xd7\xea@!@\x00\x89\x9f\x03\xf9\x02\xcb\xe7\xe2\xaa\xb0\xa2\xe8\xda`\x19", record_versions: [Record { metadata: RecordMetadata(Map({})), data: b"L\xc7\xc4+\x15\xcf\x81\xfb\xf6n\xe9\x19\xf8;.\xb7m[\xbb\x92\x92V\x18\xfc\x1ct\xe8\xfeR\xc5?@"… }], successors: [RecordTestNode { record_name: b"\xcd\x0c0\xb7\x95\xf8\xef\xaf\xd3g\xba:\x01\x88\x91\x8cb\tG\xee$\x07\xa4=\x1c\x12\xaa", record_versions: [Record { metadata: RecordMetadata(Map({})), data: b"\xf5X\xbe\xba\x12`\xe2\xb9<j\x1a\xc2\xe7\x82\x80qD\xd2\xe2\x03|\xaf\xb9<\xe4\xb6j\x94\x98a\xe8}"… }, Record { metadata: RecordMetadata(Map({})), data: b"\xb4\xb0j\xcb\xbbuOM\xb7\x83\x18\"[\x88C{\xefu\x83\xd78\x95\x98\x91\xf0\x93\xe0k;\xa4\'u"… }], successors: [] }] }, encryption_algorithm: None }
cc 5bd70b22e00168394505981cfc5de93a91e2778acd8f0fa89b8f696b6980df50 # shrinks to input = _PropRegistryArgs { config_with_signing_keys: RegistryConfigWithSigningKeys { signing_keys: [SigningKey::Ed25519 { .. }], config: RegistryConfig { hash: RegistryConfigHash { algorithm: Argon2(Argon2Params { variant: Argon2id, m_cost: 392, t_cost: 40, p_cost: 49, pepper: Some(Secret) }), output_length_in_bytes: ConfigParam<OutputLengthInBytes>(125) }, kdf: RegistryConfigKdf { algorithm: Hkdf(HkdfParams { prf: Sha512 }), file_name_length_in_bytes: ConfigParam<FileNameLengthInBytes>(63), file_tag_length_in_bytes: ConfigParam<FileTagLengthInBytes>(42), succession_nonce_length_in_bytes: ConfigParam<SuccessionNonceLengthInBytes>(78), root_predecessor_nonce: SuccessionNonce(Secret) }, verifying_keys: [Ed25519(VerifyingKeyEd25519(9393674e9973bd439d8e554157269694a7e63f983479f650fb0f873a2e3b30d1))] } }, record_test_tree: RecordTestNode { record_name: b"r\xf6\x07%\x10W\xac\xd6\xa4\x87+\x95\x87\xf9\x8c_\xcc\xeb|w\xfb\xc3\xef\xa9\x9a\x9bY\x16\xaa\x07&n\xac0+Q\xb11\xb8\xf0_\xa0\xac\xa6\xe9\xd6\x1b", record_versions: [Record { metadata: RecordMetadata(Map({})), data: b"\xb6\x01\'\x0f:\xe8\xf4`" }, Record { metadata: RecordMetadata(Map({})), data: b"\xe9\xb4\xef" }], successors: [] }, encryption_algorithm: Some(Aes256Gcm) }
